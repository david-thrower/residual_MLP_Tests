
	
parser.add_argument(
    "--min_efficient_net_head_layer_dense_units", 
    type = int,
    help="Minimum dense units for the first MLP layer after the effifientnet submodel.",
    default=1)
	

	
parser.add_argument(
    "--max_efficient_net_head_layer_dense_units", 
    type = int,
    help="Maximum dense units for the first MLP layer after the effifientnet submodel.",
    default=50)
	

	
parser.add_argument(
    "--n_options_efficient_net_head_layer_dense_units", 
    type = int,
    help="How many options for  the first MLP layer after the effifientnet submodel to try.",
    default=3)
	

	
parser.add_argument(
    "--min_efficient_net_residual_block_layers", 
    type = int,
    help="Minimum dense units for the residual Dense layer after the effifientnet submodel.",
    default=1)
	

	
parser.add_argument(
    "--max_efficient_net_residual_block_layers", 
    type = int,
    help="Maximum dense units for the residual Dense layer after the effifientnet submodel.",
    default=50)
	

	
parser.add_argument(
    "--n_options_efficient_net_residual_block_layers", 
    type = int,
    help="How many options for residual Dense layer after the effifientnet submodel to try.",
    default=3)
	

	
parser.add_argument(
    "--min_head_gru_units", 
    type = int,
    help="Minimum GRU units for the first GRU layer to try.",
    default=2)
	

	
parser.add_argument(
    "--max_head_gru_units", 
    type = int,
    help="Maximum GRU units for the first GRU layer to try.",
    default=25)
	

	
parser.add_argument(
    "--n_options_head_gru_units", 
    type = int,
    help="How many options for GRU units for the first GRU layer to try.",
    default=3)
	

	
parser.add_argument(
    "--min_second_gru_units", 
    type = int,
    help="Minimum GRU units for the 2nd GRU layer to try.",
    default=2)
	

	
parser.add_argument(
    "--max_second_gru_units", 
    type = int,
    help="Maximum GRU units for the 2nd GRU layer to try.",
    default=25)
	

	
parser.add_argument(
    "--n_options_second_gru_units", 
    type = int,
    help="How many options for GRU units for the first GRU layer to try.",
    default=3)
	

	
parser.add_argument(
    "--min_gru_head_layer_dense_units", 
    type = int,
    help="Minimum dense units for the first MLP layer after the GRU submodel.",
    default=1)
	

	
parser.add_argument(
    "--max_gru_head_layer_dense_units", 
    type = int,
    help="Maximum dense units for the first MLP layer after the GRU submodel.",
    default=50)
	

	
parser.add_argument(
    "--n_options_gru_head_layer_dense_units", 
    type = int,
    help="How many options for  the first MLP layer after the GRU submodel to try.",
    default=3)
	

	
parser.add_argument(
    "--min_gru_residual_block_layers", 
    type = int,
    help="Minimum dense units for the residual Dense layer after the GRU submodel.",
    default=1)
	

	
parser.add_argument(
    "--max_gru_residual_block_layers", 
    type = int,
    help="Maximum dense units for the residual Dense layer after the GRU submodel.",
    default=50)
	

	
parser.add_argument(
    "--n_options_gru_residual_block_layers", 
    type = int,
    help="How many options for residual Dense layer after the GRU submodel to try.",
    default=3)
	





MIN_EFFICIENT_NET_HEAD_LAYER_DENSE_UNITS = hparams['min_efficient_net_head_layer_dense_units']
MAX_EFFICIENT_NET_HEAD_LAYER_DENSE_UNITS = hparams['max_efficient_net_head_layer_dense_units']
N_OPTIONS_EFFICIENT_NET_HEAD_LAYER_DENSE_UNITS = hparams['n_options_efficient_net_head_layer_dense_units']
MIN_EFFICIENT_NET_RESIDUAL_BLOCK_LAYERS = hparams['min_efficient_net_residual_block_layers']
MAX_EFFICIENT_NET_RESIDUAL_BLOCK_LAYERS = hparams['max_efficient_net_residual_block_layers']
N_OPTIONS_EFFICIENT_NET_RESIDUAL_BLOCK_LAYERS = hparams['n_options_efficient_net_residual_block_layers']
MIN_HEAD_GRU_UNITS = hparams['min_head_gru_units']
MAX_HEAD_GRU_UNITS = hparams['max_head_gru_units']
N_OPTIONS_HEAD_GRU_UNITS = hparams['n_options_head_gru_units']
MIN_SECOND_GRU_UNITS = hparams['min_second_gru_units']
MAX_SECOND_GRU_UNITS = hparams['max_second_gru_units']
N_OPTIONS_SECOND_GRU_UNITS = hparams['n_options_second_gru_units']
MIN_GRU_HEAD_LAYER_DENSE_UNITS = hparams['min_gru_head_layer_dense_units']
MAX_GRU_HEAD_LAYER_DENSE_UNITS = hparams['max_gru_head_layer_dense_units']
N_OPTIONS_GRU_HEAD_LAYER_DENSE_UNITS = hparams['n_options_gru_head_layer_dense_units']
MIN_GRU_RESIDUAL_BLOCK_LAYERS = hparams['min_gru_residual_block_layers']
MAX_GRU_RESIDUAL_BLOCK_LAYERS = hparams['max_gru_residual_block_layers']
N_OPTIONS_GRU_RESIDUAL_BLOCK_LAYERS = hparams['n_options_gru_residual_block_layers']





min_efficient_net_head_layer_dense_units = MIN_EFFICIENT_NET_HEAD_LAYER_DENSE_UNITS
max_efficient_net_head_layer_dense_units = MAX_EFFICIENT_NET_HEAD_LAYER_DENSE_UNITS
n_options_efficient_net_head_layer_dense_units = N_OPTIONS_EFFICIENT_NET_HEAD_LAYER_DENSE_UNITS
min_efficient_net_residual_block_layers = MIN_EFFICIENT_NET_RESIDUAL_BLOCK_LAYERS
max_efficient_net_residual_block_layers = MAX_EFFICIENT_NET_RESIDUAL_BLOCK_LAYERS
n_options_efficient_net_residual_block_layers = N_OPTIONS_EFFICIENT_NET_RESIDUAL_BLOCK_LAYERS
min_head_gru_units = MIN_HEAD_GRU_UNITS
max_head_gru_units = MAX_HEAD_GRU_UNITS
n_options_head_gru_units = N_OPTIONS_HEAD_GRU_UNITS
min_second_gru_units = MIN_SECOND_GRU_UNITS
max_second_gru_units = MAX_SECOND_GRU_UNITS
n_options_second_gru_units = N_OPTIONS_SECOND_GRU_UNITS
min_gru_head_layer_dense_units = MIN_GRU_HEAD_LAYER_DENSE_UNITS
max_gru_head_layer_dense_units = MAX_GRU_HEAD_LAYER_DENSE_UNITS
n_options_gru_head_layer_dense_units = N_OPTIONS_GRU_HEAD_LAYER_DENSE_UNITS
min_gru_residual_block_layers = MIN_GRU_RESIDUAL_BLOCK_LAYERS
max_gru_residual_block_layers = MAX_GRU_RESIDUAL_BLOCK_LAYERS
n_options_gru_residual_block_layers = N_OPTIONS_GRU_RESIDUAL_BLOCK_LAYERS

print(MIN_EFFICIENT_NET_HEAD_LAYER_DENSE_UNITS = min_efficient_net_head_layer_dense_units)print(MAX_EFFICIENT_NET_HEAD_LAYER_DENSE_UNITS = max_efficient_net_head_layer_dense_units)print(N_OPTIONS_EFFICIENT_NET_HEAD_LAYER_DENSE_UNITS = n_options_efficient_net_head_layer_dense_units)print(MIN_EFFICIENT_NET_RESIDUAL_BLOCK_LAYERS = min_efficient_net_residual_block_layers)print(MAX_EFFICIENT_NET_RESIDUAL_BLOCK_LAYERS = max_efficient_net_residual_block_layers)print(N_OPTIONS_EFFICIENT_NET_RESIDUAL_BLOCK_LAYERS = n_options_efficient_net_residual_block_layers)print(MIN_HEAD_GRU_UNITS = min_head_gru_units)print(MAX_HEAD_GRU_UNITS = max_head_gru_units)print(N_OPTIONS_HEAD_GRU_UNITS = n_options_head_gru_units)print(MIN_SECOND_GRU_UNITS = min_second_gru_units)print(MAX_SECOND_GRU_UNITS = max_second_gru_units)print(N_OPTIONS_SECOND_GRU_UNITS = n_options_second_gru_units)print(MIN_GRU_HEAD_LAYER_DENSE_UNITS = min_gru_head_layer_dense_units)print(MAX_GRU_HEAD_LAYER_DENSE_UNITS = max_gru_head_layer_dense_units)print(N_OPTIONS_GRU_HEAD_LAYER_DENSE_UNITS = n_options_gru_head_layer_dense_units)print(MIN_GRU_RESIDUAL_BLOCK_LAYERS = min_gru_residual_block_layers)print(MAX_GRU_RESIDUAL_BLOCK_LAYERS = max_gru_residual_block_layers)print(N_OPTIONS_GRU_RESIDUAL_BLOCK_LAYERS = n_options_gru_residual_block_layers)
